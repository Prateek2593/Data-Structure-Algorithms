Problem Statement:-
525. Contiguous Array
Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.

Example 1:
Input: nums = [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.

Example 2:
Input: nums = [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.


Solution:-
class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        int maxLength = 0;
        int count = 0;
        unordered_map<int, int> counts; 

        for (int i = 0; i < nums.size(); ++i) {
            count += (nums[i] == 1) ? 1 : -1;

            if (count == 0) {
                maxLength = max(maxLength, i + 1);
            } else if (counts.find(count) != counts.end()) {
                maxLength = max(maxLength, i - counts[count]);
            } else {
                counts[count] = i;
            }
        }

        return maxLength;
    }
};
