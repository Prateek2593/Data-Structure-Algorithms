Problem Statement:-
930. Binary Subarrays With Sum
Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.
A subarray is a contiguous part of the array.

Example 1:
Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]

Example 2:
Input: nums = [0,0,0,0,0], goal = 0
Output: 15


Solution1:-
class Solution {
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        int i = 0;
        int j = 0;
        int sum = 0;
        int count = 0;
        int freq = 0;

        while(i < nums.size()) {
            sum += nums[i];
            if(nums[i] == 1) {
                freq = 0;
            }
            if(sum > goal) {
                sum -= nums[j];
                j++;
            }
            
            while(j <= i && sum == goal) {
                sum -= nums[j];
                j++;
                freq++;
            }
            count += freq;
            i++;
        }
        return count;
    }
};


Solution2:-
class Solution {
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        return slidingWindowAtMost(nums, goal) - slidingWindowAtMost(nums, goal - 1);
    }
private:
    // Helper function to count the number of subarrays with sum at most the given goal
    int slidingWindowAtMost(vector<int> &nums, int goal){
        int start = 0, currentSum = 0, totalCount = 0; 
        
        // Iterate through the array using a sliding window approach
        for (int end = 0; end < nums.size(); end++) {
            currentSum += nums[end];
            
            // Adjust the window by moving the start pointer to the right
            // until the sum becomes less than or equal to the goal
            while (start <= end && currentSum > goal) {
                currentSum -= nums[start++];
            }

            // Update the total count by adding the length of the current subarray
            totalCount += end - start + 1;
        }
        return totalCount;
    }
};
